---
import Button from "@/components/Button/index";
import Burger from "@/components/Burger/index.astro";
import Interactivity from "@/components/Navbar/Interactivity";
import LanguageSelect from "@/components/Navbar/LanguageSelect";
import linksList from "@/components/Navbar/linksList";
import composeCDNAssetLink from "@/utils/composeCDNAssetLink";
import { getLanguageFromURL, localizePath } from "@/utils/helpers";
import { useTranslations } from "@/i18n/utils";
import { format } from "@/utils/i18n";

export interface Props {
  currentPage: string;
  langSelectorDisabled?: boolean;
  isBlog?: boolean;
}

const { currentPage, isBlog } = Astro.props as Props;
const lang = currentPage && getLanguageFromURL(currentPage);
const t = useTranslations(Astro.url.pathname);
---

<Interactivity client:load />

<div class={`navbar ${isBlog ? "isBlog" : ""}`}>
  <div class="innerContainer">
    <div class="leftInnerContainer">
      <a href="/">
        <img
          src={composeCDNAssetLink("gdlauncher_logo.svg")}
          alt="logo"
          class="cursor-pointer"
        />
      </a>
      <div class="burger">
        <Burger />
      </div>
      <div class="linksContainer hidden">
        {
          linksList.map((props) => (
            <a
              class={`button ${
                globalThis?.location?.pathname === props.linkTo
                  ? "selected"
                  : ""
              }`}
              href={localizePath(props.linkTo, lang, props.isExternalLink)}
              target={props.isExternalLink ? "_blank" : "_self"}
            >
              {format(t(props.title[0]), "capitalize")}
            </a>
          ))
        }
        <a
          class={`newsletterLink ${
            globalThis?.location?.pathname === "/newsletter" ? "selected" : ""
          }`}
          href={localizePath("/newsletter", lang)}
        >
          {t("navbar.newsletter")}
        </a>
        <a class="button">
          <!-- {
            lang && !langSelectorDisabled && (
              <LanguageSelect lang={lang} client:idle />
            )
          } -->
        </a>
      </div>
    </div>
    <div class="rightInnerContainer">
      <a href={localizePath("/download", lang)}>
        <Button>{t("navbar.download")}</Button>
      </a>
    </div>
  </div>
</div>
<div class="mobile-menu">
  <div>
    {
      linksList.map((props) => (
        <a
          class={
            globalThis?.location?.pathname === props.linkTo ? "selected" : ""
          }
          href={localizePath(props.linkTo, lang, props.isExternalLink)}
        >
          {format(t(props.title[0]), "capitalize")}
        </a>
      ))
    }
    <a
      class={`newsletterLink ${
        globalThis?.location?.pathname === "/newsletter" ? "selected" : ""
      }`}
      href={localizePath("/newsletter", lang)}
    >
      {t("navbar.newsletter")}
    </a>
    <!-- {
      lang && !langSelectorDisabled && (
        <LanguageSelect lang={lang} client:idle />
      )
    } -->
    <div class="block">
      <a href={localizePath("/download", lang)}>
        <Button>{t("navbar.download")}</Button>
      </a>
    </div>
  </div>
</div>

<style lang="scss">
  .navbar {
    max-height: 8rem;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 50;
    padding: 1rem 1.5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    background-color: #111827;
    box-sizing: border-box;
    max-width: 100vw;
  }

  .newsletterLink {
    color: #16a34a !important;
    text-decoration: underline !important;
    text-decoration-thickness: 2px !important;
  }

  .innerContainer {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: 80rem;
  }

  .leftInnerContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    column-gap: 2.5rem;
    width: 100%;
    img {
      width: 2.5rem;
    }
    .linksContainer {
      display: none;
      font-weight: 500;
      column-gap: 1.25rem;
      color: white;
      a {
        text-decoration: none;
        color: white;
      }
    }
  }

  .rightInnerContainer {
    display: none;
  }

  .mobile-menu {
    display: none;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: #111827;
    padding: 1rem;
    z-index: 40;

    & > div {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 1rem;

      a {
        position: relative;
        padding: 0;
        cursor: pointer;
        transition: all ease-in-out;
        margin: 0.25rem;
        color: #94a3b8;
        text-decoration: none;
        font-size: 20px;
      }
    }
  }

  a {
    text-decoration: none;
  }

  @media (min-width: 1024px) {
    .navbar {
      position: absolute;
      // top: 0;
      bottom: auto;
      background-color: transparent;
    }

    .navbar.isBlog {
      top: 0;
    }

    .burger {
      display: none;
    }
    .leftInnerContainer {
      width: auto;
      img {
        width: 100%;
      }
      .linksContainer {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
    }
    .rightInnerContainer {
      display: flex;
    }
  }
</style>
